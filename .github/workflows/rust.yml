name: Build and Release
on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary_name: cppsage
            asset_name: cppsage-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary_name: cppsage.exe
            asset_name: cppsage-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            binary_name: cppsage
            asset_name: cppsage-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            binary_name: cppsage
            asset_name: cppsage-macos-aarch64

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }} --verbose
    
    - name: Run tests
      run: cargo test --verbose
    
    - name: Prepare binary
      shell: bash
      run: |
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp ${{ matrix.binary_name }} ../../../${{ matrix.asset_name }}
        else
          cp ${{ matrix.binary_name }} ../../../${{ matrix.asset_name }}
          strip ../../../${{ matrix.asset_name }}
        fi
    
    - name: Upload binary as artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Automated release for commit ${{ github.sha }}
          
          ## Changes
          - Built from latest master branch
          
          ## Binaries
          - Linux x86_64
          - Windows x86_64  
          - macOS x86_64 (Intel)
          - macOS ARM64 (Apple Silicon)
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        upload_url="${{ steps.create_release.outputs.upload_url }}"
        for dir in ./artifacts/*/; do
          asset_name=$(basename "$dir")
          asset_path="$dir$asset_name"
          echo "Uploading $asset_name from $asset_path"
          curl \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Content-Type: application/octet-stream" \
            --data-binary @"$asset_path" \
            "${upload_url%\{*}?name=$asset_name"
        done
